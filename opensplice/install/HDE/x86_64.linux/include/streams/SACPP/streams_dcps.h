//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: streams_dcps.h
//  Source: /home/itfanr/repo_git/github.com/ADLINK-IST/opensplice/src/api/streams/idl/streams_dcps.idl
//  Generated: Fri Oct 12 16:41:49 2018
//  OpenSplice 6.7.180404OSS
//  
//******************************************************************
#ifndef _STREAMS_DCPS_H_
#define _STREAMS_DCPS_H_

#include "sacpp_mapping.h"
#include "dds_dcps.h"


namespace DDS
{
   namespace Streams
   {
      struct StreamFlushQosPolicy;
      struct StreamDataWriterQos;
      struct StreamDataReaderQos;

      class StreamDataWriter;

      typedef StreamDataWriter * StreamDataWriter_ptr;
      typedef DDS_DCPSInterface_var < StreamDataWriter> StreamDataWriter_var;
      typedef DDS_DCPSInterface_out < StreamDataWriter> StreamDataWriter_out;


      class StreamDataReader;

      typedef StreamDataReader * StreamDataReader_ptr;
      typedef DDS_DCPSInterface_var < StreamDataReader> StreamDataReader_var;
      typedef DDS_DCPSInterface_out < StreamDataReader> StreamDataReader_out;

      typedef DDS::ULong StreamId;

      struct StreamFlushQosPolicy
      {
            Duration_t max_delay;
            ULong max_samples;
      };

      typedef DDS_DCPSStruct_var < StreamFlushQosPolicy> StreamFlushQosPolicy_var;
      typedef StreamFlushQosPolicy&StreamFlushQosPolicy_out;

      struct StreamDataWriterQos
      {
            StreamFlushQosPolicy flush;
      };

      typedef DDS_DCPSStruct_var < StreamDataWriterQos> StreamDataWriterQos_var;
      typedef StreamDataWriterQos&StreamDataWriterQos_out;

      struct StreamDataReaderQos
      {
            octSeq value;
      };

      typedef DDS_DCPSStruct_var < StreamDataReaderQos> StreamDataReaderQos_var;
      typedef DDS_DCPSStruct_out < StreamDataReaderQos> StreamDataReaderQos_out;
      class StreamDataWriter
      :
         virtual public LocalObject
      { 
      public:
         typedef StreamDataWriter_ptr _ptr_type;
         typedef StreamDataWriter_var _var_type;

         static StreamDataWriter_ptr _duplicate (StreamDataWriter_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static StreamDataWriter_ptr _narrow (DDS::Object_ptr obj);
         static StreamDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static StreamDataWriter_ptr _nil () { return 0; }
         static const char * _local_id;
         StreamDataWriter_ptr _this () { return this; }

         virtual Long set_qos (const StreamDataWriterQos& qos) = 0;
         virtual Long get_qos (StreamDataWriterQos& qos) = 0;
         virtual Long flush (ULong id) = 0;

      protected:
         StreamDataWriter () {};
         ~StreamDataWriter () {};
      private:
         StreamDataWriter (const StreamDataWriter &);
         StreamDataWriter & operator = (const StreamDataWriter &);
      };

      class StreamDataReader
      :
         virtual public LocalObject
      { 
      public:
         typedef StreamDataReader_ptr _ptr_type;
         typedef StreamDataReader_var _var_type;

         static StreamDataReader_ptr _duplicate (StreamDataReader_ptr obj);
         DDS::Boolean _local_is_a (const char * id);

         static StreamDataReader_ptr _narrow (DDS::Object_ptr obj);
         static StreamDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
         static StreamDataReader_ptr _nil () { return 0; }
         static const char * _local_id;
         StreamDataReader_ptr _this () { return this; }

         virtual Long set_qos (const StreamDataReaderQos& qos) = 0;
         virtual Long get_qos (StreamDataReaderQos& qos) = 0;

      protected:
         StreamDataReader () {};
         ~StreamDataReader () {};
      private:
         StreamDataReader (const StreamDataReader &);
         StreamDataReader & operator = (const StreamDataReader &);
      };

      class StreamsException
      :
         public UserException
      { 
      public:
         static StreamsException* _downcast (DDS::Exception *);
         static const StreamsException* _downcast (const DDS::Exception *);
         static DDS::Exception * factory ();
         static DDS::ExceptionInitializer m_initializer;

         StreamsException () {};
         StreamsException (const char * _message, Long _id);
         StreamsException (const StreamsException &);
         StreamsException& operator = (const StreamsException &);
         virtual DDS::Exception * _clone () const;
         virtual void _raise () const;
         virtual const char * _name () const { return m_name; };
         virtual const char * _rep_id () const { return m_id; };
         virtual ~StreamsException () {}

         public: 

         String_mgr message;
         Long id;
      private:
         static const char * m_name;
         static const char * m_id;
      };
   }
}




#endif
